/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package laba1;

/**
 *
 * @author 40ush
 */

import java.io.BufferedInputStream;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.io.ObjectOutputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;


public class NewJFrame extends javax.swing.JFrame {

    ArrayList<RecIntegral> array = new ArrayList<>();
    private static final int SERVER_PORT = 12345;
    private static final String SERVER_IP = "192.168.56.1";

    private DatagramSocket socket;
    private InetAddress serverAddress;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        try {
            socket = new DatagramSocket();
            serverAddress = InetAddress.getByName(SERVER_IP);
        } 
        catch (IOException e) {
        }
        initComponents();
        //jButtonGet.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDown = new javax.swing.JTextField();
        jTextFieldUp = new javax.swing.JTextField();
        jTextFieldStep = new javax.swing.JTextField();
        jButtonAdd = new javax.swing.JButton();
        jButtonDel = new javax.swing.JButton();
        jButtonCalc = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButtonClear = new javax.swing.JButton();
        jButtonFull = new javax.swing.JButton();
        jButtonSB = new javax.swing.JButton();
        jButtonLB = new javax.swing.JButton();
        jButtonST = new javax.swing.JButton();
        jButtonLT = new javax.swing.JButton();
        jButtonGet = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Lower bound");

        jLabel2.setText("Upper bound");

        jLabel3.setText("Step");

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonDel.setText("Delete");
        jButtonDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelActionPerformed(evt);
            }
        });

        jButtonCalc.setText("Calculate");
        jButtonCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lower bound", "Upper bound", "Step", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel4.setText("cos(x)");

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonFull.setText("Full");
        jButtonFull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFullActionPerformed(evt);
            }
        });

        jButtonSB.setText("Save Binary");
        jButtonSB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSBActionPerformed(evt);
            }
        });

        jButtonLB.setText("Load Binary");
        jButtonLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLBActionPerformed(evt);
            }
        });

        jButtonST.setText("Save Text");
        jButtonST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSTActionPerformed(evt);
            }
        });

        jButtonLT.setText("Load Text");
        jButtonLT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLTActionPerformed(evt);
            }
        });

        jButtonGet.setText("Get");
        jButtonGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonAdd)
                                    .addComponent(jTextFieldDown, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldUp, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonDel))
                                .addGap(34, 34, 34))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(79, 79, 79)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButtonCalc, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextFieldStep, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(54, 54, 54)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButtonFull)
                                        .addComponent(jButtonClear)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonLT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(jButtonST, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jButtonGet, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSB, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButtonGet))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFull))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonDel)
                    .addComponent(jButtonCalc)
                    .addComponent(jButtonClear))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSB)
                    .addComponent(jButtonST))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLB)
                    .addComponent(jButtonLT))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    public double parseDouble(String input) throws MyException {
        input = input.replace(',', '.');
        if (input.matches("-?\\d+(\\.\\d+)?")) {
            double tmp = Double.parseDouble(input);
            if(tmp > 1000000 || tmp< 0.000001)
                throw new MyException("The values are not within the acceptable range");
            return tmp;
        } else {
            throw new MyException("The values are within the acceptable range");
        }
    }
    public boolean IsCorrect(double d1, double d2, double d3) throws MyException {
        if(d1 >= d2 || d3 >= d2-d1 )
            throw new MyException("Does not fit the conditions");
        return true;
    }

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel Table = (DefaultTableModel)jTable1.getModel();
            //Table.addRow(new Object[]{jTextFieldDown.getText(), jTextFieldUp.getText(), jTextFieldStep.getText()});
            double down = parseDouble(jTextFieldDown.getText() );
            double up = parseDouble(jTextFieldUp.getText() );
            double step = parseDouble(jTextFieldStep.getText() );

            //array.add(new RecIntegral(double parseDouble(Table.getText(), )));
            if(IsCorrect(down, up, step)) {
                Table.addRow(new Object[]{jTextFieldDown.getText(), jTextFieldUp.getText(), jTextFieldStep.getText()});
                String downstr = String.valueOf(down);
                String upstr = String.valueOf(up);
                String stepstr = String.valueOf(step);
                array.add(new RecIntegral(Arrays.stream(new String[]{downstr, upstr, stepstr, "0"}).toList()));
                sendRequest("ADD," + jTextFieldDown.getText() + "," + jTextFieldUp.getText() + "," + jTextFieldStep.getText());
            }
        }
        catch (MyException ex) {
                ex.GetFormMessage();
            }
        jTextFieldDown.setText("");
        jTextFieldUp.setText("");
        jTextFieldStep.setText("");

    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Table = (DefaultTableModel)jTable1.getModel();
        int temp = jTable1.getSelectedRow();
        Table.removeRow(temp);
        array.remove(temp);
        sendRequest("DELETE," + (temp + 1)); 
        //if(jTable1.getSelectedRowCount()==1){
        //    Table.removeRow(jTable1.getSelectedRow());
        //}
    }//GEN-LAST:event_jButtonDelActionPerformed

    private void jButtonCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Table = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        if(row != -1){
            double down = Double.parseDouble(jTable1.getValueAt(row, 0).toString());
            double up = Double.parseDouble(jTable1.getValueAt(row, 1).toString());
            double step = Double.parseDouble(jTable1.getValueAt(row, 2).toString());
            //double result = 0;
            long startTime = System.nanoTime();
            JThread Thread1 = new JThread(down, (down + (up-down)/3), step);
            JThread Thread2 = new JThread((down + (up-down)/3), (down + 2*(up-down)/3), step);
            JThread Thread3 = new JThread((down + 2*(up-down)/3), up, step);
            Thread1.start();
            Thread2.start();
            Thread3.start();
            try {
                Thread1.join();
                Thread2.join();
                Thread3.join();
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
            double result = Thread1.getResult() + Thread2.getResult() + Thread3.getResult();
            sendRequest("EDIT," + row + "," + down + "," + up + "," + step + "," + result);
            long endTime = System.nanoTime();
            long executionTime = endTime - startTime;
            System.out.println("Время выполнения: " + executionTime + " нс");

            Table.setValueAt(result, row, 3);
            array.get(row).setDataByIndex(3, String.valueOf(result));
        }
        
    }//GEN-LAST:event_jButtonCalcActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Table = (DefaultTableModel)jTable1.getModel();
        int temp = jTable1.getRowCount();
        for (int i = 0; i < temp; i++) {
            Table.removeRow(0);
        }
    }//GEN-LAST:event_jButtonClearActionPerformed
    
    private void jButtonFullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFullActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Table = (DefaultTableModel)jTable1.getModel();
        int selectedRow = jTable1.getRowCount();
               for (int i= 0; i < selectedRow; i++){
                   Table.removeRow(0);
               }
               for (RecIntegral element: array) {
                   Table.addRow(element.getRecord().toArray());
               }
    }//GEN-LAST:event_jButtonFullActionPerformed

    private void jButtonSBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSBActionPerformed
        // TODO add your handling code here:
        //DefaultTableModel Table = (DefaultTableModel)jTable1.getModel();
        ObjectOutputStream out = null;
        int temp = jTable1.getSelectedRow();
        if (temp == -1) {
           return;
        }
        try {
           out = new ObjectOutputStream(new BufferedOutputStream(
                   new FileOutputStream("BinaryStringNumber" + temp + ".txt")));
           out.writeObject(array.get(temp));
           out.close();
        } catch (IOException ignored) {
        }

    }//GEN-LAST:event_jButtonSBActionPerformed

    private void jButtonLBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLBActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Table = (DefaultTableModel)jTable1.getModel();
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fileChooser.showOpenDialog(null);
        ObjectInputStream in = null;
        RecIntegral restObj = null;
        int temp = jTable1.getRowCount();
        if (temp != -1 ){
        for (int i = 0; i < temp; i++) {
           Table.removeRow(0);
        }}
        try {
        in = new ObjectInputStream(new BufferedInputStream(
            new FileInputStream(fileChooser.getSelectedFile().getAbsolutePath())));
        restObj = (RecIntegral) in.readObject();
        array.add(restObj);
        Table.addRow(restObj.getRecord().toArray());
        }
        catch (IOException | ClassNotFoundException ex ) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_jButtonLBActionPerformed

    private void jButtonSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSTActionPerformed
        // TODO add your handling code here:
        ObjectOutputStream out = null;
        int temp = jTable1.getSelectedRow();
        if (temp == -1) {
           return;
        }
        try {
           out = new ObjectOutputStream(new BufferedOutputStream(
                   new FileOutputStream("TextStringNumber" + temp + ".txt")));
           out.writeObject(array.get(temp).toString());
           out.close();
        } catch (IOException ignored) {
        }
    }//GEN-LAST:event_jButtonSTActionPerformed

    private void jButtonLTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLTActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Table = (DefaultTableModel)jTable1.getModel();
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getDefaultDirectory());
        fileChooser.showOpenDialog(null);
        ObjectInputStream in = null;
        RecIntegral restObj = null;
        int temp = jTable1.getRowCount();
        if (temp != -1 ){
           for (int i = 0; i < temp; i++) {
               Table.removeRow(0);
           }
        }
        try {
           in = new ObjectInputStream(new BufferedInputStream(
                   new FileInputStream(fileChooser.getSelectedFile().getAbsolutePath())));
           restObj = RecIntegral.fromString((String) in.readObject());
           array.add(restObj);
           Table.addRow(restObj.getRecord().toArray());
        }
        catch (IOException | ClassNotFoundException ex ) {
           //ex.printStackTrace();
        }
//        }

    }//GEN-LAST:event_jButtonLTActionPerformed

    private void jButtonGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetActionPerformed
        // TODO add your handling code here:
        sendRequest("GET");
    }//GEN-LAST:event_jButtonGetActionPerformed
    
    private void sendRequest(String request) {
        try {
            byte[] requestData = request.getBytes();
            DatagramPacket packet = new DatagramPacket(requestData, requestData.length, serverAddress, SERVER_PORT);
            socket.send(packet);

            byte[] responseData = new byte[1024];
            DatagramPacket responsePacket = new DatagramPacket(responseData, responseData.length);
            socket.receive(responsePacket);

            String response = new String(responsePacket.getData(), 0, responsePacket.getLength());
            if(request.equals("GET")) {
                updateTable(response);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    private void updateTable(String response) {
        DefaultTableModel Table = (DefaultTableModel)jTable1.getModel();
        Table.setRowCount(0); 
        String[] rows = response.split("\n");
        for (String row : rows) {
            String[] columns = row.split(",");
            if (columns.length == 4) { 
                Table.addRow(new Object[]{columns[0].trim(), columns[1].trim(), columns[2].trim(), columns[3].trim()});
            }
        }
    }


    /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
    class JThread extends Thread{
        private double a;
        private double b;
        private double n;
        private double result = 0.0;

        JThread(double a, double b, double n){
            this.a = a;
            this.b = b;
            this.n = n;
        } 
        public double getResult () {
            return result;
        }                

        @Override
        public void run(){
            double dx = (b-a)/n;
            for (int i = 1; i < dx; i++){
                if(!((a+n)>b)) {
                    result+= (Math.cos(a+n)+Math.cos(a))*n/2;
                    a += n;
                }
                else result+= (Math.cos(a)+Math.cos(b))*(b-a)/2;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        
        
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCalc;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonDel;
    private javax.swing.JButton jButtonFull;
    private javax.swing.JButton jButtonGet;
    private javax.swing.JButton jButtonLB;
    private javax.swing.JButton jButtonLT;
    private javax.swing.JButton jButtonSB;
    private javax.swing.JButton jButtonST;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldDown;
    private javax.swing.JTextField jTextFieldStep;
    private javax.swing.JTextField jTextFieldUp;
    // End of variables declaration//GEN-END:variables
}